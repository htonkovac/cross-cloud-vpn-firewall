version: "3"
vars:
  VM_A_IP: {sh: terraform -chdir=terraform output -raw vm_a_ip}
  VM_B_IP: {sh: terraform -chdir=terraform output -raw vm_b_ip}

tasks:
  default:
    cmds:
    - task: tf_init
    - task: tf
    - task: gen_ansible_inventory
    - task: ansible
    
  generate_new_ssh_key:
    desc: "Generate a new SSH key"
    cmds:
      - ssh-keygen -t rsa -b 4096 -f ./ssh-keys/mykey

  tf:
    desc: "run tf apply"
    cmds:
      - "terraform -chdir=terraform apply --auto-approve"
  
  tf_init:
    desc: "run tf apply"
    cmds:
      - "terraform -chdir=terraform init"

  vm_a:
    desc: "ssh into vm A"
    cmds:
      - ssh -v -o StrictHostKeyChecking=no -i ./ssh-keys/mykey adminuser@{{.VM_A_IP}}

  vm_b:
    desc: "ssh into vm B"
    cmds:
      - ssh -v -o StrictHostKeyChecking=no -i ./ssh-keys/mykey adminuser@{{.VM_B_IP}}

  tf_destroy:
    desc: "run tf destroy"
    cmds:
      - "terraform -chdir=terraform destroy --auto-approve"
      - "rm inventory"

  gen_ansible_inventory:
    desc: generate ansible inventory
    generates:
      - "./inventory"
    cmds:
      - echo "$(terraform -chdir=terraform output -raw vm_a_ip)" > inventory
      - echo "$(terraform -chdir=terraform output -raw vm_b_ip)" >> inventory

  ansible:
    desc: run ansible
    cmds:
      - ansible-playbook -u adminuser -i inventory --private-key ./ssh-keys/mykey ansible/task.yaml
